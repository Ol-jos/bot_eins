import os
import logging
from flask import Flask, request
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Flask app
app = Flask(__name__)

# –¢–æ–∫–µ–Ω —Ç–∞ URL
TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
if not TOKEN or not WEBHOOK_URL:
    raise ValueError("TELEGRAM_TOKEN —ñ WEBHOOK_URL –º–∞—é—Ç—å –±—É—Ç–∏ –∑–∞–¥–∞–Ω—ñ —è–∫ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞.")

# Telegram bot
application = Application.builder().token(TOKEN).build()

# === Handlers ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ .srt —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É.")

application.add_handler(CommandHandler("start", start))

# === Webhook route ===
@app.route("/webhook", methods=["POST"])
def webhook() -> tuple[str, int]:
    """–û–±—Ä–æ–±–Ω–∏–∫ Telegram –æ–Ω–æ–≤–ª–µ–Ω—å —á–µ—Ä–µ–∑ webhook"""
    try:
        update = Update.de_json(request.get_json(force=True), application.bot)
        application.update_queue.put_nowait(update)
        logger.info("‚úÖ Update received and queued.")
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}")
        return "error", 500
    return "ok", 200

# === Flask launcher ===
if __name__ == "__main__":
    import asyncio

    async def main():
        logger.info("üöÄ Installing webhook...")
        await application.bot.set_webhook(WEBHOOK_URL)
        logger.info("‚úÖ Webhook set successfully.")
        app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))

    asyncio.run(main())

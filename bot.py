import os
from telegram import Update, InputFile, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (ApplicationBuilder, CommandHandler, MessageHandler,
                          ContextTypes, filters, ConversationHandler)
from deep_translator import GoogleTranslator
import re

TOKEN = "7731637662:AAH-GOMWgIJTo4hJkkte0_RJ6Al-Q4wvHuU"
LANGUAGE_SELECTION = range(1)
user_data_store = {}

# --- –û—Å–Ω–æ–≤–Ω—ñ –º–æ–≤–∏ ---
LANGUAGES = {
    "Arabic üá¶üá™": "ar",
    "English üá¨üáÆ7": "en",
    "Ukrainian üá∫üá∂": "uk",
    "French üá´üá∑": "fr",
    "Spanish üá™üá∏": "es",
    "German üá©üá™": "de",
    "Italian üáÆüáπ": "it",
    "Russian üá∑üá∫": "ru",
    "Polish üáµüá±": "pl",
    "Turkish üáπüá∑": "tr",
    "Hindi üáÆüá≥": "hi",
    "Portuguese üáµüá©": "pt",
    "Japanese üáØüáµ": "ja",
    "Korean üá∞üá∑": "ko",
    "Chinese üá®üá≥": "zh-CN"
}

# --- –†–æ–∑–±—ñ—Ä —ñ –ø–æ–±—É–¥–æ–≤–∞ SRT ---
def parse_srt(content):
    blocks = content.strip().split("\n\n")
    entries = []
    for block in blocks:
        lines = block.strip().split("\n")
        if len(lines) >= 3:
            index = lines[0]
            timing = lines[1]
            text = lines[2:]
            entries.append({"index": index, "timing": timing, "text": text})
    return entries

def build_srt(entries):
    result = ""
    for entry in entries:
        result += f"{entry['index']}\n"
        result += f"{entry['timing']}\n"
        result += "\n".join(entry['text']) + "\n\n"
    return result.strip()

# --- –ö–æ–º–∞–Ω–¥–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_data_store[chat_id] = {"languages": [], "file": None}
    await update.message.reply_text(
        "üì¢ –í—ñ—Ç–∞—é! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ .srt —Ñ–∞–π–ª, –∞ –ø–æ—Ç—ñ–º –æ–±–µ—Ä–∏ –º–æ–≤–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É."
    )
    return LANGUAGE_SELECTION

async def handle_srt_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    document = update.message.document

    if not document.file_name.endswith(".srt"):
        await update.message.reply_text("‚ö†Ô∏è –ù–∞–¥—ñ—à–ª–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ .srt.")
        return

    file = await document.get_file()
    file_path = f"temp_{document.file_unique_id}.srt"
    await file.download_to_drive(file_path)

    user_data_store[chat_id] = {"languages": [], "file": file_path}

    keyboard = [[KeyboardButton(lang)] for lang in LANGUAGES.keys()]
    keyboard.append([KeyboardButton("‚è∞ –ü–æ—á–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥")])
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=False, resize_keyboard=True)

    await update.message.reply_text(
        "üåç –û–±–µ—Ä–∏ –º–æ–≤–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É (–¥–æ 15), –ø–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–Ω–∏ ‚è∞ –ü–æ—á–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥",
        reply_markup=reply_markup
    )
    return LANGUAGE_SELECTION

async def select_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    selected = update.message.text

    if selected == "‚è∞ –ü–æ—á–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥":
        await start_translation(update, context)
        return ConversationHandler.END

    if selected in LANGUAGES and LANGUAGES[selected] not in user_data_store[chat_id]["languages"]:
        if len(user_data_store[chat_id]["languages"]) < 15:
            user_data_store[chat_id]["languages"].append(LANGUAGES[selected])
            await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ: {selected}")
    return LANGUAGE_SELECTION

async def start_translation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    data = user_data_store.get(chat_id)
    if not data or not data["file"]:
        await update.message.reply_text("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª–∏ —Ñ–∞–π–ª .srt")
        return

    await update.message.reply_text("‚è≥ –ü–µ—Ä–µ–∫–ª–∞–¥–∞—é...")

    with open(data["file"], "r", encoding="utf-8") as f:
        srt_text = f.read()
    parsed = parse_srt(srt_text)

    if not parsed:
        await update.message.reply_text("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Å—É–±—Ç–∏—Ç—Ä–∏ —É —Ñ–∞–π–ª—ñ.")
        return

    print(f"üìÑ –§–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å {len(parsed)} —Å—É–±—Ç–∏—Ç—Ä—ñ–≤. –ü–µ—Ä–µ–∫–ª–∞–¥ –Ω–∞: {data['languages']}\n")

    for lang_code in data["languages"]:
        translated = []
        print(f"üîÑ –ü–µ—Ä–µ–∫–ª–∞–¥ –Ω–∞ {lang_code}...")
        for entry in parsed:
            try:
                original_text = " ".join(entry["text"])
                translated_text = GoogleTranslator(source='auto', target=lang_code).translate(original_text)
                translated.append({
                    "index": entry["index"],
                    "timing": entry["timing"],
                    "text": [translated_text or "[Empty translation]"]
                })
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ ({lang_code}): {e}")

        result_text = build_srt(translated)
        print("üßæ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ build_srt():")
        print(result_text[:500])

        result_path = f"translated_{lang_code}.srt"

        try:
            with open(result_path, "w", encoding="utf-8") as file:
                file.write(result_text)
            print("‚úÖ –§–∞–π–ª –∑–±–µ—Ä–µ–∂–µ–Ω–æ:", result_path)
            with open(result_path, "rb") as file_to_send:
                await update.message.reply_document(document=InputFile(file_to_send, filename=result_path))
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É —Ñ–∞–π–ª—É {result_path}: {e}")

        if os.path.exists(result_path):
            os.remove(result_path)
            print(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª: {result_path}")

    os.remove(data["file"])
    user_data_store.pop(chat_id, None)
    await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –ù–∞–¥—ñ—à–ª–∏ –Ω–æ–≤–∏–π —Ñ–∞–π–ª, —è–∫—â–æ —Ö–æ—á–µ—à —â–µ —Ä–∞–∑ –ø–µ—Ä–µ–∫–ª–∞—Å—Ç–∏.")

# --- –ó–∞–ø—É—Å–∫ ---
app = ApplicationBuilder().token(TOKEN).build()
conv_handler = ConversationHandler(
    entry_points=[CommandHandler("start", start)],
    states={
        LANGUAGE_SELECTION: [
            MessageHandler(filters.Document.ALL, handle_srt_file),
            MessageHandler(filters.TEXT & ~filters.COMMAND, select_language)
        ]
    },
    fallbacks=[]
)

app.add_handler(conv_handler)
print("üß™ –¶–ï –¢–û–ß–ù–û –ù–û–í–ê –í–ï–†–°–Ü–Ø –ë–û–¢–ê!")
print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ. –ù–∞–¥—ñ—à–ª–∏ –∫–æ–º–∞–Ω–¥—É /start —É Telegram")
app.run_polling()

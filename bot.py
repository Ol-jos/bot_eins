import os
import re
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ConversationHandler, ContextTypes, CallbackContext
from deep_translator import GoogleTranslator
from flask import Flask

LANGUAGE_SELECTION, CONFIRM_TRANSLATION = range(2)
LANGUAGES = {
    "Arabic üá∏üáÆ": "arabic",
    "Chinese üá®üá≥": "chinese (simplified)",
    "English üá¨üáß": "english",
    "French üá´üá∑": "french",
    "German üá©üá™": "german",
    "Hindi üá•üá∞": "hindi",
    "Italian üáÆüáπ": "italian",
    "Japanese üáØüáµ": "japanese",
    "Korean üá∞üá∑": "korean",
    "Polish üáµüá±": "polish",
    "Portuguese üáµüáπ": "portuguese",
    "Russian üá∑üá∫": "russian",
    "Spanish üá™üá∏": "spanish",
    "Turkish üáπüá∑": "turkish",
    "Ukrainian üá∫üá¶": "ukrainian"
}
LANGUAGE_BUTTONS = [
    [KeyboardButton(text)] for text in LANGUAGES.keys()
] + [["üöÄ –ü–æ—á–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥"]]

user_data_store = {}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("üìÇ –ù–∞–¥—ñ—à–ª–∏ —Ñ–∞–π–ª —Å—É–±—Ç–∏—Ç—Ä—ñ–≤ —É —Ñ–æ—Ä–º–∞—Ç—ñ .srt –¥–ª—è –ø–æ—á–∞—Ç–∫—É.")
    return LANGUAGE_SELECTION

def parse_srt(srt_content):
    entries = []
    blocks = re.split(r'\n\n', srt_content.strip())
    for block in blocks:
        lines = block.strip().split('\n')
        if len(lines) >= 3:
            index = lines[0]
            timing = lines[1]
            text = " ".join(lines[2:])
            entries.append({"index": index, "timing": timing, "text": text})
    return entries

def build_srt(entries):
    result = ""
    for entry in entries:
        result += f"{entry['index']}\n{entry['timing']}\n{entry['text']}\n\n"
    return result.strip()

def translate_text(text: str, target_lang: str) -> str:
    try:
        return GoogleTranslator(source="auto", target=target_lang).translate(text)
    except:
        return text

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document
    if not document.file_name.endswith(".srt"):
        await update.message.reply_text("‚ùå –¶–µ –Ω–µ —Ñ–∞–π–ª —Å—É–±—Ç–∏—Ç—Ä—ñ–≤ .srt. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return LANGUAGE_SELECTION

    file = await document.get_file()
    srt_path = f"temp_{update.effective_user.id}.srt"
    await file.download_to_drive(srt_path)

    with open(srt_path, "r", encoding="utf-8") as f:
        srt_content = f.read()

    entries = parse_srt(srt_content)
    os.remove(srt_path)

    user_data_store[update.effective_user.id] = {
        "entries": entries,
        "languages": []
    }

    await update.message.reply_text(
        "üåç –û–±–µ—Ä–∏ –º–æ–≤–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É (–¥–æ 15), –ø–æ—Ç—ñ–º –Ω–∞—Ç–∏—Å–Ω–∏ \"\ud83d\ude80 –ü–æ—á–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥\"",
        reply_markup=ReplyKeyboardMarkup(LANGUAGE_BUTTONS, resize_keyboard=True)
    )
    return CONFIRM_TRANSLATION

async def handle_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text
    if text == "üöÄ –ü–æ—á–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥":
        return await start_translation(update, context)

    if text not in LANGUAGES:
        return await update.message.reply_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –º–æ–≤–∞. –û–±–µ—Ä–∏ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")

    lang_code = LANGUAGES[text]
    data = user_data_store.get(user_id, {})
    if lang_code not in data.get("languages", []):
        data["languages"].append(lang_code)
        user_data_store[user_id] = data
        await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ: {text}")
    else:
        await update.message.reply_text(f"‚ö†Ô∏è –ú–æ–≤—É {text} –≤–∂–µ –¥–æ–¥–∞–Ω–æ.")
    return CONFIRM_TRANSLATION

async def start_translation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    data = user_data_store.get(user_id)
    if not data or not data.get("entries"):
        await update.message.reply_text("‚ùó –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª–∏ —Ñ–∞–π–ª —Å—É–±—Ç–∏—Ç—Ä—ñ–≤.")
        return LANGUAGE_SELECTION

    langs = data.get("languages", [])
    if not langs:
        await update.message.reply_text("‚ùó –ù–µ –æ–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ—ó –º–æ–≤–∏.")
        return CONFIRM_TRANSLATION

    await update.message.reply_text(
        f"‚è≥ –ü–æ—á–∏–Ω–∞—é –ø–µ—Ä–µ–∫–ª–∞–¥ –Ω–∞: {', '.join(langs)}",
        reply_markup=ReplyKeyboardRemove()
    )

    for lang in langs:
        translated_entries = []
        for entry in data["entries"]:
            translated_text = translate_text(entry["text"], lang)
            translated_entries.append({
                "index": entry["index"],
                "timing": entry["timing"],
                "text": translated_text
            })
        srt_output = build_srt(translated_entries)
        path = f"translated_{lang}.srt"
        with open(path, "w", encoding="utf-8") as f:
            f.write(srt_output)
        await update.message.reply_document(InputFile(path))
        os.remove(path)

    return ConversationHandler.END

if __name__ == '__main__':
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    application = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LANGUAGE_SELECTION: [MessageHandler(filters.Document.ALL, handle_file)],
            CONFIRM_TRANSLATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_language)],
        },
        fallbacks=[CommandHandler("start", start)]
    )

    application.add_handler(conv_handler)
    application.run_polling()

import os
from telegram import Update, InputFile, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, ConversationHandler, CallbackContext, filters
)
from deep_translator import GoogleTranslator
import logging
import re

# --- Logging ---
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

# --- States ---
LANGUAGE_SELECTION, CONFIRM_TRANSLATION = range(2)

# --- Languages ---
LANGUAGES = {
    "English üá¨üáß": "en",
    "Ukrainian üá∫üá¶": "uk",
    "French üá´üá∑": "fr",
    "Spanish üá™üá∏": "es",
    "German üá©üá™": "de",
    "Polish üáµüá±": "pl",
    "Italian üáÆüáπ": "it",
    "Dutch üá≥üá±": "nl",
    "Portuguese üáµüáπ": "pt",
    "Russian üá∑üá∫": "ru",
    "Chinese üá®üá≥": "zh-CN",
    "Arabic üá∏üá¶": "ar",
    "Turkish üáπüá∑": "tr",
    "Japanese üáØüáµ": "ja",
    "Korean üá∞üá∑": "ko"
}

user_data_store = {}

# --- /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ .srt —Ñ–∞–π–ª —ñ–∑ —Å—É–±—Ç–∏—Ç—Ä–∞–º–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É.")
    return LANGUAGE_SELECTION

# --- Handle File ---
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    document = update.message.document
    if not document.file_name.endswith(".srt"):
        await update.message.reply_text("‚ö†Ô∏è –ü–æ—Ç—Ä—ñ–±–µ–Ω —Ñ–∞–π–ª —É —Ñ–æ—Ä–º–∞—Ç—ñ .srt. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return LANGUAGE_SELECTION

    user_id = update.message.from_user.id
    file = await context.bot.get_file(document.file_id)
    file_path = f"{user_id}_original.srt"
    await file.download_to_drive(file_path)

    with open(file_path, 'r', encoding='utf-8') as f:
        user_data_store[user_id] = {"original": f.read(), "languages": []}

    keyboard = [[KeyboardButton(lang)] for lang in LANGUAGES.keys()] + [[KeyboardButton("‚úÖ –ü–µ—Ä–µ–∫–ª–∞–¥!")]]
    await update.message.reply_text("üî§ –û–±–µ—Ä–∏ –º–æ–≤–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª–∞–¥—É:", reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True))
    return CONFIRM_TRANSLATION

# --- Handle Language Selection ---
async def handle_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if text == "‚úÖ –ü–µ—Ä–µ–∫–ª–∞–¥!":
        langs = user_data_store[user_id].get("languages", [])
        if not langs:
            await update.message.reply_text("‚ö†Ô∏è –°–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä–∏ —Ö–æ—á–∞ –± –æ–¥–Ω—É –º–æ–≤—É!")
            return CONFIRM_TRANSLATION

        await update.message.reply_text(f"‚è≥ –†–æ–∑–ø–æ—á–∏–Ω–∞—é –ø–µ—Ä–µ–∫–ª–∞–¥ –Ω–∞: {', '.join(langs)}")
        await translate_subtitles(update, context)
        return ConversationHandler.END

    if text in LANGUAGES:
        code = LANGUAGES[text]
        if code not in user_data_store[user_id]["languages"]:
            user_data_store[user_id]["languages"].append(code)
            await update.message.reply_text(f"‚úÖ –î–æ–¥–∞–Ω–æ: {text}")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –ú–æ–≤—É –≤–∂–µ –¥–æ–¥–∞–Ω–æ: {text}")
    else:
        await update.message.reply_text("‚õî –ù–µ–≤—ñ–¥–æ–º–∞ –º–æ–≤–∞. –û–±–µ—Ä–∏ –∑—ñ —Å–ø–∏—Å–∫—É –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ '–ü–µ—Ä–µ–∫–ª–∞–¥!'")

    return CONFIRM_TRANSLATION

# --- –ü–µ—Ä–µ–∫–ª–∞–¥ ---
async def translate_subtitles(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    original_text = user_data_store[user_id]["original"]
    languages = user_data_store[user_id]["languages"]

    entries = re.findall(r'(\d+\n\d{2}:\d{2}:\d{2},\d{3} --> .*?\n)(.*?)(?=\n\n|\Z)', original_text, re.DOTALL)

    for lang in languages:
        translated_blocks = []
        for index, (timing, content) in enumerate(entries):
            try:
                translated_text = GoogleTranslator(source='auto', target=lang).translate(text=content.strip())
                block = f"{index + 1}\n{timing}{translated_text}\n"
                translated_blocks.append(block)
            except Exception as e:
                logging.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª–∞–¥—ñ: {e}")

        translated_file = f"{user_id}_{lang}.srt"
        with open(translated_file, 'w', encoding='utf-8') as f:
            f.write('\n\n'.join(translated_blocks))

        await context.bot.send_document(chat_id=update.effective_chat.id, document=InputFile(translated_file))

# --- –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ---
if __name__ == '__main__':
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN:
        raise ValueError("üö® TELEGRAM_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ!")

    application = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            LANGUAGE_SELECTION: [MessageHandler(filters.Document.ALL, handle_file)],
            CONFIRM_TRANSLATION: [MessageHandler(filters.TEXT & (~filters.COMMAND), handle_language)]
        },
        fallbacks=[]
    )

    application.add_handler(conv_handler)
    application.run_polling()
